import Ajv from 'ajv';

// JSON Schema allows an object to contain properties that are not specified by
// the schema. This can be disabled with `additionalProperties: false`. Ajv then
// supports a `removeAdditional` option, directing it to remove any properties
// from an object which are not specified in the schema.
//
// We need to allow additional properties in practice because:
//
// 1) we already have a lot of integrations throwing all sorts of custom
//    properties on entities and
// 2) when an entity has multiple classes, each schema needs to allow for
//    properties from other schemas.
/**
 * An Ajv schema for integration graph objects, useful for validating that
 * entities conform to minimum requirements.
 */
export const IntegrationSchema = new Ajv({ unknownFormats: 'ignore' });

// Schema Imports : generated by tools/generate-schema-imports.sh
import Workload from './schemas/Workload.json';
import Weakness from './schemas/Weakness.json';
import Vulnerability from './schemas/Vulnerability.json';
import Vendor from './schemas/Vendor.json';
import Vault from './schemas/Vault.json';
import UserGroup from './schemas/UserGroup.json';
import User from './schemas/User.json';
import Training from './schemas/Training.json';
import Team from './schemas/Team.json';
import Task from './schemas/Task.json';
import Subscription from './schemas/Subscription.json';
import Standard from './schemas/Standard.json';
import Site from './schemas/Site.json';
import Service from './schemas/Service.json';
import Section from './schemas/Section.json';
import Scanner from './schemas/Scanner.json';
import Ruleset from './schemas/Ruleset.json';
import Rule from './schemas/Rule.json';
import Root from './schemas/Root.json';
import Risk from './schemas/Risk.json';
import Review from './schemas/Review.json';
import Resource from './schemas/Resource.json';
import Requirement from './schemas/Requirement.json';
import Repository from './schemas/Repository.json';
import RecordEntity from './schemas/RecordEntity.json';
import Record from './schemas/Record.json';
import Queue from './schemas/Queue.json';
import Project from './schemas/Project.json';
import Program from './schemas/Program.json';
import Product from './schemas/Product.json';
import Process from './schemas/Process.json';
import Procedure from './schemas/Procedure.json';
import Policy from './schemas/Policy.json';
import Person from './schemas/Person.json';
import PasswordPolicy from './schemas/PasswordPolicy.json';
import PR from './schemas/PR.json';
import Organization from './schemas/Organization.json';
import NetworkInterface from './schemas/NetworkInterface.json';
import NetworkEndpoint from './schemas/NetworkEndpoint.json';
import Network from './schemas/Network.json';
import Module from './schemas/Module.json';
import Logs from './schemas/Logs.json';
import Key from './schemas/Key.json';
import IpAddress from './schemas/IpAddress.json';
import Internet from './schemas/Internet.json';
import Incident from './schemas/Incident.json';
import Image from './schemas/Image.json';
import HostAgent from './schemas/HostAgent.json';
import Host from './schemas/Host.json';
import Group from './schemas/Group.json';
import GraphObject from './schemas/GraphObject.json';
import Gateway from './schemas/Gateway.json';
import Function from './schemas/Function.json';
import Framework from './schemas/Framework.json';
import Firewall from './schemas/Firewall.json';
import Finding from './schemas/Finding.json';
import Entity from './schemas/Entity.json';
import DomainZone from './schemas/DomainZone.json';
import DomainRecord from './schemas/DomainRecord.json';
import Domain from './schemas/Domain.json';
import Document from './schemas/Document.json';
import Disk from './schemas/Disk.json';
import Directory from './schemas/Directory.json';
import Device from './schemas/Device.json';
import Deployment from './schemas/Deployment.json';
import Database from './schemas/Database.json';
import DataStore from './schemas/DataStore.json';
import DataObject from './schemas/DataObject.json';
import CryptoKey from './schemas/CryptoKey.json';
import ControlPolicy from './schemas/ControlPolicy.json';
import Control from './schemas/Control.json';
import Container from './schemas/Container.json';
import Configuration from './schemas/Configuration.json';
import CodeReview from './schemas/CodeReview.json';
import CodeRepo from './schemas/CodeRepo.json';
import CodeModule from './schemas/CodeModule.json';
import CodeDeploy from './schemas/CodeDeploy.json';
import CodeCommit from './schemas/CodeCommit.json';
import Cluster from './schemas/Cluster.json';
import Channel from './schemas/Channel.json';
import Certificate from './schemas/Certificate.json';
import Backup from './schemas/Backup.json';
import Attacker from './schemas/Attacker.json';
import Assessment from './schemas/Assessment.json';
import ApplicationEndpoint from './schemas/ApplicationEndpoint.json';
import Application from './schemas/Application.json';
import Account from './schemas/Account.json';
import AccessRole from './schemas/AccessRole.json';
import AccessPolicy from './schemas/AccessPolicy.json';
import AccessKey from './schemas/AccessKey.json';

export const entitySchemas = {
  Workload,
  Weakness,
  Vulnerability,
  Vendor,
  Vault,
  UserGroup,
  User,
  Training,
  Team,
  Task,
  Subscription,
  Standard,
  Site,
  Service,
  Section,
  Scanner,
  Ruleset,
  Rule,
  Root,
  Risk,
  Review,
  Resource,
  Requirement,
  Repository,
  RecordEntity,
  Record,
  Queue,
  Project,
  Program,
  Product,
  Process,
  Procedure,
  Policy,
  Person,
  PasswordPolicy,
  PR,
  Organization,
  NetworkInterface,
  NetworkEndpoint,
  Network,
  Module,
  Logs,
  Key,
  IpAddress,
  Internet,
  Incident,
  Image,
  HostAgent,
  Host,
  Group,
  GraphObject,
  Gateway,
  Function,
  Framework,
  Firewall,
  Finding,
  Entity,
  DomainZone,
  DomainRecord,
  Domain,
  Document,
  Disk,
  Directory,
  Device,
  Deployment,
  Database,
  DataStore,
  DataObject,
  CryptoKey,
  ControlPolicy,
  Control,
  Container,
  Configuration,
  CodeReview,
  CodeRepo,
  CodeModule,
  CodeDeploy,
  CodeCommit,
  Cluster,
  Channel,
  Certificate,
  Backup,
  Attacker,
  Assessment,
  ApplicationEndpoint,
  Application,
  Account,
  AccessRole,
  AccessPolicy,
  AccessKey,
};

export type EntityClass = keyof typeof entitySchemas;
export const entityClasses = Object.keys(entitySchemas) as EntityClass[];

entityClasses.map((schema) =>
  IntegrationSchema.addSchema(entitySchemas[schema]),
);
