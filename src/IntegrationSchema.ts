import Ajv from 'ajv';
import addFormats from 'ajv-formats';

const ipv4 = addFormats.get('ipv4') as RegExp;
const ipv6 = addFormats.get('ipv6') as RegExp;

// JSON Schema allows an object to contain properties that are not specified by
// the schema. This can be disabled with `additionalProperties: false`. Ajv then
// supports a `removeAdditional` option, directing it to remove any properties
// from an object which are not specified in the schema.
//
// We need to allow additional properties in practice because:
//
// 1) we already have a lot of integrations throwing all sorts of custom
//    properties on entities and
// 2) when an entity has multiple classes, each schema needs to allow for
//    properties from other schemas.
/**
 * An Ajv schema for integration graph objects, useful for validating that
 * entities conform to minimum requirements.
 */
export const IntegrationSchema = new Ajv({
  // Ignore "excludes", "multiple"; used in JupiterOne UI?
  strictSchema: false,
  formats: {
    ip: (x) => ipv4.test(x) || ipv6.test(x),
  },
});

// Install ajv-formats
addFormats(IntegrationSchema);

// Schema Imports : generated by tools/generate-schema-imports.sh
