/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A password policy is a specific `Ruleset`. It is separately defined because of its pervasive usage across digital environments and the well known properties (such as length and complexity) unique to a password policy.
 */
export type PasswordPolicy = Entity & {
  /**
   * Minimum password length
   */
  minLength?: number;
  /**
   * Indicates if a password must contain at least one symbol
   */
  requireSymbols?: boolean;
  /**
   * Indicates if a password must contain at least one number
   */
  requireNumbers?: boolean;
  /**
   * Indicates if a password must contain at least one uppercase character
   */
  requireUppercase?: boolean;
  /**
   * Indicates if a password must contain at least one lowercase character
   */
  requireLowercase?: boolean;
  /**
   * Specifies how long (in days) a password remains valid before it expires (0 indicates no limit - passwords do not expire)
   */
  maxAgeDays?: number;
  /**
   * Specifies the minimum time interval (in minutes) between password changes (0 indicates no limit)
   */
  minAgeMins?: number;
  /**
   * Specifies the number of previous passwords that users are prevented from reusing (0 indicates none)
   */
  historyCount?: number;
  /**
   * Indicates if the user is allowed/prevented to change their own password
   */
  preventReset?: boolean;
  /**
   * Specifies the number of days prior to password expiration when a user will be warned to reset their password (0 indicates no warning)
   */
  expiryWarningDays?: number;
  /**
   * Specifies whether users are prevented from setting a new password after their password has expired
   */
  hardExpiry?: boolean;
  /**
   * Indicates if the username must be excluded from the password
   */
  excludeUsername?: boolean;
  /**
   * The user profile attributes whose values must be excluded from the password
   */
  excludeAttributes?: string[];
  /**
   * Indicates whether to check passwords against a common/weak password dictionary
   */
  excludeCommonPasswords?: boolean;
  /**
   * Specifies the number of times users can attempt to log in to their accounts with an invalid password before their accounts are locked (0 indicates no limit)
   */
  lockoutAttempts?: number;
  /**
   * Specifies the time interval (in minutes) a locked account remains locked before it is automatically unlocked (0 indicates no limit)
   */
  autoUnlockMins?: number;
  /**
   * Specifies whether multi-factor authentication (MFA) is required
   */
  requireMFA?: boolean;
  [k: string]: unknown;
};
/**
 * A node in the graph database that represents an Entity. This reference schema defines common shared properties among most Entities.
 */
export type Entity = {
  [k: string]: unknown;
} & {
  /**
   * Identifiers of this entity assigned by the providers. Values are expected to be unique within the provider scope.
   */
  id?: string | string[];
  /**
   * Name of this entity
   */
  name: string;
  /**
   * Display name, e.g. a person's preferred name or an AWS account alias
   */
  displayName: string;
  /**
   * A summary / short description of this entity.
   */
  summary?: string;
  /**
   * An extended description of this entity.
   */
  description?: string;
  /**
   * The sensitivity of the data; should match company data classification scheme
   */
  classification?: string | null;
  /**
   * A number that represents the value or criticality of this entity, on a scale between 1-10.
   */
  criticality?: number;
  /**
   * The risk level of this entity, on a scale between 1-10.
   */
  risk?: number;
  /**
   * The trust level of this entity, on a scale between 1-10.
   */
  trust?: number;
  /**
   * The compliance status of the entity, as a percentage of compliancy.
   */
  complianceStatus?: number;
  /**
   * Status of this entity set by the external source system or by a user, e.g. Active, Inactive, Decommissioned
   */
  status?: string;
  /**
   * Indicates if this entity is currently active.
   */
  active?: boolean;
  /**
   * Indicates if this is a public-facing resource (e.g. a public IP or public DNS record) or if the entity is publicly accessible. Default is false.
   */
  public?: boolean;
  /**
   * Indicates if this node has been validated as a known/valid Entity.
   */
  validated?: boolean;
  /**
   * Indicates if this node is a temporary resource, such as a lambda instance or an EC2 instance started by ECS.
   */
  temporary?: boolean;
  /**
   * Indicates if this is a trusted resource. For example, a trusted Network, Host, Device, Application, Person, User, or Vendor.
   */
  trusted?: boolean;
  /**
   * The timestamp (in milliseconds since epoch) when the entity was created at the source. This is different than `_createdOn` which is the timestamp the entity was first ingested into JupiterOne.
   */
  createdOn?: number;
  /**
   * The timestamp (in milliseconds since epoch) when the entity was last updated at the source.
   */
  updatedOn?: number;
  /**
   * The timestamp (in milliseconds since epoch) when the entity was deleted at the source.
   */
  deletedOn?: number;
  /**
   * The timestamp (in milliseconds since epoch) when the entity was discovered.
   */
  discoveredOn?: number;
  /**
   * If the entity is a temporary resource, optionally set the expiration date. For example, the expiration date of an SSL cert.
   */
  expiresOn?: number;
  /**
   * The source/principal/user that created the entity
   */
  createdBy?: string;
  /**
   * The source/principal/user that updated the entity
   */
  updatedBy?: string;
  /**
   * The source/principal/user that deleted the entity
   */
  deletedBy?: string;
  /**
   * The source/principal/user that discovered the entity
   */
  discoveredBy?: string;
  /**
   * Web link to the source. For example: https://console.aws.amazon.com/iam/home#/roles/Administrator. This property is used by the UI to add a hyperlink to the entity.
   */
  webLink?: string;
  /**
   * The owner of this entity. This could reference the name of the owner, or as reference ID/key to another entity in the graph as the owner.
   */
  owner?: string;
  /**
   * An array of unnamed tags
   */
  tags?: string[];
  /**
   * User provided notes about this entity
   */
  notes?: string[];
  [k: string]: unknown;
};
