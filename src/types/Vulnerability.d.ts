/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A security vulnerability (application or system or infrastructure). A single vulnerability may relate to multiple findings and impact multiple resources. The `IMPACTS` relationship between the Vulnerability and the resource entity that was impacted serves as the record of the finding. The `IMPACTS` relationship carries properties such as 'identifiedOn', 'remediatedOn', 'remediationDueOn', 'issueLink', etc.
 */
export type Vulnerability = RecordEntity & {
  /**
   * The category of the vulnerability finding
   */
  category: string | null;
  /**
   * Status of the vulnerability
   */
  status?: string;
  /**
   * Severity rating based on impact and exploitability. Can be a string such as 'critical', 'high', 'medium', 'low', 'info'.  Or an integer usually between 0-5.
   */
  severity: string | null;
  /**
   * Priority level mapping to Severity rating. Can be a string such as 'critical', 'high', 'medium', 'low', 'info'.  Or an integer usually between 0-5.
   */
  priority?: string;
  /**
   * The overall vulnerability score, e.g. CVSSv3.
   */
  score?: number;
  /**
   * The impact score/rating.
   */
  impact?: number;
  /**
   * The exploitability score/rating.
   */
  exploitability?: number;
  /**
   * The vulnerability attack vector. (e.g. a CVSSv3 vector looks like this - 'AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N')
   */
  vector?: string;
  /**
   * The target listing of projects, applications, repos or systems this vulnerability impacts. Specifying either the project/repo name or the application URL here will auto-map this Vulnerability to the corresponding Project/CodeRepo/Application entity if a match is found.
   */
  impacts?: string[];
  /**
   * The number of days that the Vulnerability must be remediated within, based on SLA set by the organization's internal vulnerability management program policy. The actually due date is set by 'remediationDueOn' property on the `IMPACTS` relationship between the Vulnerability and its impacted resource entity.
   */
  remediationSLA?: number;
  /**
   * Indicates whether this vulnerability finding is a blocking issue. If true, it should block a production deploy. Defaults to false.
   */
  blocking: boolean | null;
  /**
   * Indicates if this is an open vulnerability.
   */
  open: boolean | null;
  /**
   * Indicates if this vulnerability is in production.
   */
  production: boolean | null;
  /**
   * Indicates if this is a publicly disclosed vulnerability. If yes, this is usually a CVE and the 'webLink' should be set to 'https://nvd.nist.gov/vuln/detail/${CVE-Number}' or to a vendor URL. If not, it is most likely a custom application vulnerability.
   */
  public: boolean | null;
  /**
   * Indicates if this Vulnerability finding has been validated by the security team.
   */
  validated?: boolean;
  /**
   * The array of links to references.
   */
  references?: string[];
  [k: string]: unknown;
};
/**
 * A node in the graph database that represents a Record Entity, with a set of different defined common properties than standard (resource) entities.
 */
export type RecordEntity = {
  [k: string]: unknown;
} & {
  /**
   * Name of this entity
   */
  name: string;
  /**
   * Display name, e.g. a person's preferred name or an AWS account alias
   */
  displayName: string;
  /**
   * A summary / short description of this entity.
   */
  summary?: string;
  /**
   * An extended description of this entity.
   */
  description?: string;
  /**
   * The sensitivity of the data; should match company data classification scheme. For example: critical - confidential - internal - public.
   */
  classification?: string;
  /**
   * The category of the official record
   */
  category?: string;
  /**
   * Hyperlink to the location of this record, e.g. URL to a Jira issue
   */
  webLink?: string;
  /**
   * Text content of the record/documentation
   */
  content?: string;
  /**
   * Indicates if this record is currently open. For example, an open Vulnerability finding (Vulnerability extends Record).
   */
  open?: boolean;
  /**
   * If this is a public record. Defaults to false.
   */
  public?: boolean;
  /**
   * If this is a production record. For example, a production change management ticket would have this set to `true`, and have a `category` = `change` property. Another example would be a Vulnerability finding in production.
   */
  production?: boolean;
  /**
   * If this is record has been reviewed and approved.
   */
  approved?: boolean;
  /**
   * The timestamp (in milliseconds since epoch) when this record was approved.
   */
  approvedOn?: number;
  /**
   * The list of approvers on the record.
   */
  approvers?: string[];
  /**
   * The person or system that reported or created this record.
   */
  reporter?: string;
  /**
   * The timestamp (in milliseconds since epoch) when this record was reported/opened. In most cases, this would be the same as `createdOn` but occasionally a record can be created at a different time than when it was first reported.
   */
  reportedOn?: number;
  /**
   * The timestamp (in milliseconds since epoch) when the entity was created at the source. This is different than `_createdOn` which is the timestamp the entity was first ingested into JupiterOne.
   */
  createdOn?: number;
  /**
   * The timestamp (in milliseconds since epoch) when the entity was last updated at the source.
   */
  updatedOn?: number;
  /**
   * Indicates if this record has an applied exception. For example, exception for a known finding or a PR that is not fully approved.
   */
  exception?: boolean;
  /**
   * Reason / description of the exception.
   */
  exceptionReason?: string;
  [k: string]: unknown;
};
